// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryL.Data;

#nullable disable

namespace RepositoryL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<int>("Days")
                        .HasColumnType("int");

                    b.Property<int>("PriceEntry")
                        .HasColumnType("int");

                    b.HasKey("AppointmentId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Property<int>("bookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("bookId"));

                    b.Property<int>("BookState")
                        .HasColumnType("int");

                    b.Property<int>("discountId")
                        .HasColumnType("int");

                    b.HasKey("bookId");

                    b.HasIndex("discountId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("Domain.Entities.Discount", b =>
                {
                    b.Property<int>("discountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("discountId"));

                    b.Property<int>("DiscountCode")
                        .HasColumnType("int");

                    b.Property<int>("DiscountState")
                        .HasColumnType("int");

                    b.HasKey("discountId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Domain.Entities.DoctorsAppointments", b =>
                {
                    b.Property<int>("doctorid")
                        .HasColumnType("int");

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.HasKey("doctorid", "AppointmentId");

                    b.HasIndex("AppointmentId");

                    b.ToTable("DoctorsAppointments");
                });

            modelBuilder.Entity("Domain.Entities.PatientsBookings", b =>
                {
                    b.Property<int>("bookId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("bookId", "PatientId");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientsBookings");
                });

            modelBuilder.Entity("Domain.Entities.Specialization", b =>
                {
                    b.Property<int>("SpecializationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecializationId"));

                    b.Property<string>("SpecializationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SpecializationId");

                    b.ToTable("Specializations");

                    b.HasData(
                        new
                        {
                            SpecializationId = 1,
                            SpecializationName = "Genetic pathology"
                        },
                        new
                        {
                            SpecializationId = 2,
                            SpecializationName = "Ophthalmology"
                        },
                        new
                        {
                            SpecializationId = 3,
                            SpecializationName = "Oncology"
                        },
                        new
                        {
                            SpecializationId = 4,
                            SpecializationName = "Cardiology "
                        },
                        new
                        {
                            SpecializationId = 5,
                            SpecializationName = "Hematology "
                        },
                        new
                        {
                            SpecializationId = 6,
                            SpecializationName = "otolaryngology "
                        },
                        new
                        {
                            SpecializationId = 7,
                            SpecializationName = "Psychiatry "
                        },
                        new
                        {
                            SpecializationId = 8,
                            SpecializationName = "Liver Transplant Surgery"
                        },
                        new
                        {
                            SpecializationId = 9,
                            SpecializationName = "Pediatric surgery"
                        },
                        new
                        {
                            SpecializationId = 10,
                            SpecializationName = "Foot and ankle orthopedics"
                        },
                        new
                        {
                            SpecializationId = 11,
                            SpecializationName = "Dentistry"
                        },
                        new
                        {
                            SpecializationId = 12,
                            SpecializationName = "Gastroenterology"
                        });
                });

            modelBuilder.Entity("Domain.Entities.TimeAppointment", b =>
                {
                    b.Property<int>("timeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("timeId"));

                    b.Property<int>("AppointmentId")
                        .HasColumnType("int");

                    b.Property<int>("bookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("time")
                        .HasColumnType("datetime2");

                    b.HasKey("timeId");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("bookId");

                    b.ToTable("TimeAppointments");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("Discriminator").HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2a1c55f1-93e1-4f12-9f63-bf29332c1941",
                            Name = "Admin"
                        },
                        new
                        {
                            Id = "242999a3-ee43-4fcc-b3ae-3735aed867b0",
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = "91796624-f5a4-4b86-8bc4-548ce9e34e8e",
                            Name = "Patient"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<int>("SpecializationId")
                        .HasColumnType("int");

                    b.Property<int>("doctorid")
                        .HasColumnType("int");

                    b.Property<int>("price")
                        .HasColumnType("int");

                    b.HasIndex("SpecializationId");

                    b.HasDiscriminator().HasValue("Doctor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateBirth = new DateTime(1995, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ahmedali@bit.com",
                            FirstName = "Ahmed",
                            Gender = 1,
                            LastName = "Ali",
                            Password = "PO-k?$rn",
                            Phone = "012345678",
                            image = "images/1.jpeg",
                            SpecializationId = 8,
                            doctorid = 0,
                            price = 200
                        },
                        new
                        {
                            Id = 2,
                            DateBirth = new DateTime(1978, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mohamedhosam@bit.com",
                            FirstName = "Mohamed",
                            Gender = 1,
                            LastName = "Hosam",
                            Password = "(UHp'Nkh",
                            Phone = "02456972",
                            image = "images/2.jpeg",
                            SpecializationId = 7,
                            doctorid = 0,
                            price = 200
                        },
                        new
                        {
                            Id = 3,
                            DateBirth = new DateTime(1985, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "mahmoudwael@bit.com",
                            FirstName = "Mahmoud",
                            Gender = 1,
                            LastName = "Wael",
                            Password = "n`6Jy}+z",
                            Phone = "01246875",
                            image = "images/3.jpeg",
                            SpecializationId = 5,
                            doctorid = 0,
                            price = 200
                        },
                        new
                        {
                            Id = 4,
                            DateBirth = new DateTime(1992, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hamzawaleed@bit.com",
                            FirstName = "Hamza",
                            Gender = 1,
                            LastName = "Waleed",
                            Password = "6(@Ksr5c",
                            Phone = "012364799",
                            image = "images/4.jpeg",
                            SpecializationId = 4,
                            doctorid = 0,
                            price = 200
                        },
                        new
                        {
                            Id = 5,
                            DateBirth = new DateTime(1993, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "omartaher@bit.com",
                            FirstName = "Omar",
                            Gender = 1,
                            LastName = "Taher",
                            Password = "6+d$e#Js",
                            Phone = "01268958",
                            image = "images/5.jpeg",
                            SpecializationId = 1,
                            doctorid = 0,
                            price = 200
                        },
                        new
                        {
                            Id = 6,
                            DateBirth = new DateTime(1992, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "yousefhamed@bit.com",
                            FirstName = "Yousef",
                            Gender = 1,
                            LastName = "Hamed",
                            Password = "qt;<}Kjh",
                            Phone = "0145588",
                            image = "images/6.jpeg",
                            SpecializationId = 2,
                            doctorid = 0,
                            price = 200
                        },
                        new
                        {
                            Id = 7,
                            DateBirth = new DateTime(1997, 7, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "khaledramzy@bit.com",
                            FirstName = "Khaled",
                            Gender = 1,
                            LastName = "Razmy",
                            Password = "8)Q`wkP$",
                            Phone = "013678526",
                            image = "images/7.jpeg",
                            SpecializationId = 3,
                            doctorid = 0,
                            price = 200
                        },
                        new
                        {
                            Id = 8,
                            DateBirth = new DateTime(1999, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "yasersayed@bit.com",
                            FirstName = "yaser",
                            Gender = 1,
                            LastName = "sayed",
                            Password = "P<!=W6fe",
                            Phone = "01369885",
                            image = "images/8.jpeg",
                            SpecializationId = 9,
                            doctorid = 0,
                            price = 200
                        },
                        new
                        {
                            Id = 9,
                            DateBirth = new DateTime(1987, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "amrahmed",
                            FirstName = "Amr",
                            Gender = 1,
                            LastName = "Ahmed",
                            Password = "l)OJ*VkB",
                            Phone = "0123648796",
                            image = "images/9.jpeg",
                            SpecializationId = 10,
                            doctorid = 0,
                            price = 200
                        },
                        new
                        {
                            Id = 10,
                            DateBirth = new DateTime(1995, 2, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ayaahmed",
                            FirstName = "Aya",
                            Gender = 0,
                            LastName = "Ahmed",
                            Password = "ynz#Jpsg",
                            Phone = "0123546",
                            image = "images/10.jpeg",
                            SpecializationId = 11,
                            doctorid = 0,
                            price = 200
                        },
                        new
                        {
                            Id = 11,
                            DateBirth = new DateTime(1996, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "hanaamagdy@bit.com",
                            FirstName = "Hanaa",
                            Gender = 0,
                            LastName = "Magdy",
                            Password = "zNH:gT7w",
                            Phone = "0197586413",
                            image = "images/11.jpeg",
                            SpecializationId = 12,
                            doctorid = 0,
                            price = 200
                        },
                        new
                        {
                            Id = 12,
                            DateBirth = new DateTime(1998, 4, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "halamodamed@bit.com",
                            FirstName = "Hala",
                            Gender = 0,
                            LastName = "Mohamed",
                            Password = "#;b*D+x$",
                            Phone = "010955487652",
                            image = "images/12.jpeg",
                            SpecializationId = 8,
                            doctorid = 0,
                            price = 200
                        },
                        new
                        {
                            Id = 13,
                            DateBirth = new DateTime(1994, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "fatmasafwt@@bit.com",
                            FirstName = "Fatma",
                            Gender = 0,
                            LastName = "Safwt",
                            Password = "]Q,X$|ri",
                            Phone = "01269753684",
                            image = "images/13.jpeg",
                            SpecializationId = 12,
                            doctorid = 0,
                            price = 200
                        },
                        new
                        {
                            Id = 14,
                            DateBirth = new DateTime(1991, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "masaadham@bit.com",
                            FirstName = "yara",
                            Gender = 0,
                            LastName = "Ayman",
                            Password = "VXFlvL2d",
                            Phone = "0125873",
                            image = "images/14.jpeg",
                            SpecializationId = 3,
                            doctorid = 0,
                            price = 200
                        });
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.HasBaseType("Domain.Entities.User");

                    b.Property<long>("NumberofRequest")
                        .HasColumnType("bigint");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("Patient");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.HasOne("Domain.Entities.Discount", null)
                        .WithMany()
                        .HasForeignKey("discountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.DoctorsAppointments", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", "Appointment")
                        .WithMany("doctorsAppointments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Doctor", "Doctor")
                        .WithMany("doctorsAppointments")
                        .HasForeignKey("doctorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Appointment");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Domain.Entities.PatientsBookings", b =>
                {
                    b.HasOne("Domain.Entities.Patient", "Patient")
                        .WithMany("patientsBookings")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Booking", "Booking")
                        .WithMany("patientsBookings")
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Domain.Entities.TimeAppointment", b =>
                {
                    b.HasOne("Domain.Entities.Appointment", null)
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Booking", null)
                        .WithMany()
                        .HasForeignKey("bookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.HasOne("Domain.Entities.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Appointment", b =>
                {
                    b.Navigation("doctorsAppointments");
                });

            modelBuilder.Entity("Domain.Entities.Booking", b =>
                {
                    b.Navigation("patientsBookings");
                });

            modelBuilder.Entity("Domain.Entities.Doctor", b =>
                {
                    b.Navigation("doctorsAppointments");
                });

            modelBuilder.Entity("Domain.Entities.Patient", b =>
                {
                    b.Navigation("patientsBookings");
                });
#pragma warning restore 612, 618
        }
    }
}
